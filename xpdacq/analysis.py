#!/usr/bin/env python
##############################################################################
#
# xpdacq            by Billinge Group
#                   Simon J. L. Billinge sb2896@columbia.edu
#                   (c) 2016 trustees of Columbia University in the City of
#                        New York.
#                   All rights reserved
#
# File coded by:    Timothy Liu, Simon Billinge
#
# See AUTHORS.txt for a list of people who contributed.
# See LICENSE.txt for license information.
#
##############################################################################
#from dataportal import DataBroker as db
#from dataportal import get_events, get_table, get_images
#from metadatastore.commands import find_run_starts

import os
import datetime
import numpy as np
import tifffile as tif
import matplotlib as plt
from xpdacq.glbl import _dataBroker as db
from xpdacq.glbl import _getEvents as get_events
from xpdacq.glbl import _getImages as get_images

_fname_field = ['sc_name','sa_name'] 
# before complete entire file saving mechanism, still leave sample name here
bt = _get_obj('bt')
w_dir = os.path.join(glbl.home, 'tiff_base')
W_DIR = w_dir # in case crashes in old codes

def bt_uid():
    return bt.get(0).md['bt_uid']

def _feature_gen(header):
    ''' generate a human readable file name. 

    file name is generated by metadata information in header 
    '''
    uid = header.start.uid[:6]
    feature_list = []
    
    
    field = header['start']
    for key in _fname_field:

        # get special label
        try:
            if header.start['xp_isdark']:
                feature_list.append('dark')
        except KeyError:
            pass

        try:
            el = field[key]
            if isinstance(el, list):
                try:
                # grab the first two experimenters if exist
                    feature_list.append(str(el[0]))
                    feature_list.append(str(el[1]))
                except IndexError:
                    feature_list.append('defaultExperimenter')
            else:
                # truncate string length
                if len(el)>12:
                    value = el[:12]
                else:
                    value = el
                # clear space
                feature = [ ch for ch in list(el) if ch!=' ']
                feature_list.append(''.join(feature))
        except KeyError:
            # exceptioin handle. If user forgot to define require fields
            pass
    
    # FIXME - find a way to include motor information
    f_name = "_".join(feature_list)
    exp_time = _timestampstr(header.start.time, hour=True)
    return '_'.join([f_name, exp_time, uid])

def _timestampstr(timestamp, hour=False):
    ''' convert timestamp to strftime formate '''
    if not hour:
        timestring = datetime.datetime.fromtimestamp(float(timestamp)).strftime('%Y%m%d')
    elif hour:
        timestring = datetime.datetime.fromtimestamp(float(timestamp)).strftime('%Y%m%d-%H%M')
    return timestring

def save_last_tiff():
    save_tiff(db[-1])

def save_tiff(headers):
    ''' save images obtained from dataBroker as tiff format files. It returns nothing.

    arguments:
        headers - list - a list of header objects obtained from a query to dataBroker
    '''

    F_EXTEN = '.tiff'

    # prepare header
    if type(list(headers)[1]) == str:
        header_list = list()
        header_list.append(headers)
    else:
        header_list = headers
    
    # iterate over header(s)
    for header in header_list:
        print('Saving your image(s) now....')
        # get images and exposure time from headers level
        
        # prepare imgs and events
        header_events = list(get_events(header))
        
        img_field = _identify_image_field(header)
        light_imgs = np.array(get_images(header, img_field))

        try:
            cnt_time = header.start['xp_computed_exposure']
            print('cnt_time = %s' % cnt_time)
        except KeyError:
            print('Opps you forgot to enter exposure time')
            pass
        
        
        # container for final image 
        img_list = list() # dark correction functionality could be included in here later
        for i in range(light_imgs.shape[0]):
            dummy = light_imgs[i] 
            img_list.append(dummy)
        
        for i in range(len(img_list)):
            img = img_list[i]
            #w_dir = datapath.tif_dir
            dummy_name = _feature_gen(header)
            
            # get temperature label
            if 'temperautre' in header_events[i]['data']:
                # temperautre is a typo from Dan but it is there...
                f_name = dummy_name + '_'+str(header_events[i]['data']['temperautre'])+'K'
            else:
                f_name = dummy_name

            ind = str(i)
            combind_f_name = '_'.join([f_name,ind]) + F_EXTEN # add ind value
            
            w_name = os.path.join(W_DIR, combind_f_name)
            tif.imsave(w_name, img) 
            
            if os.path.isfile(w_name):
                print('image "%s" has been saved at "%s"' % (combind_f_name, W_DIR))
                print('if you do not see as much metadata as you expected in file name, that means you forgot to enter it')
            else:
                print('Sorry, something went wrong with your tif saving')
                return

    print('||********Saving process SUCCEEDED********||')

# make sure codes at XPD is still working after renaming
#save_tif = save_tiff


def plot_images(header):
    ''' function to plot images from header.
    
    It plots images, return nothing

    Parameters
    ----------
        header : databroker header object
            header pulled out from central file system

    '''
    # prepare header
    if type(list(headers)[1]) == str:
        header_list = list()
        header_list.append(headers)
    else:
        header_list = headers
    
    for header in header_list:
        uid = header.start.uid 
        img_field = _identify_image_field(header)
        imgs = np.array(get_images(header, img_field))
        print('Plotting your data now...')
        for i in range(imgs.shape[0]):
            img = imgs[i]
            plot_title = '_'.join(uid, str(i))
            # just display user uid and index of this image
            try:
                fig = plt.figure(plot_title)
                plt.imshow(img)
                plt.show()
            except:
                pass # allow matplotlib to crash without stopping other function

def plot_last_scan():
    ''' function to plot images from last header
    '''
    plot_images(db[-1])


def _identify_image_field(header):
    ''' small function to identify image filed key words in header
    '''
    try:
        img_field =[el for el in header.descriptors[0]['data_keys'] if el.endswith('_image')][0]
        print('Images are pulling out from %s' % img_field)
        return img_field
    except IndexError:
        uid = header.start.uid
        print('This header with uid = %s does not contain any image' % uid)
        print('Was area detector correctly mounted then?')
        print('Stop here')
        return

